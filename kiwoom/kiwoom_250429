from PyQt5.QAxContainer import *   # PyQt5.QAxConyainer 불러오는 코드
from PyQt5.QtCore import *   # PyQt5.QtCore 안에 이벤트 루프를 실행하는 QEventLoop() 함수를 불러오는 라이브러리
from config.errorCode import *   # config 에러 발생시 나오는 변수 저장소

class Kiwoom(QAxWidget):   # 
   def __init__(self):
      super().__init__()
      print("Kiwoom() class start.")
      
      ####### event loop를 실행하기 위한 변수모음
      self.login_event_loop = QEventLoop() #로그인을 이벤트 루프 안에서 실행하도록 만들기 위해 선언한 변수
<<<<<<< HEAD
      self.detail_account_info_event_loop = None # 예수금 요청용 이벤트 루프 쓰레드 간섭을 막는다
=======
>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
      #########################################
      
      ### 계좌 관련된 변수
      self.account_num = None # 계좌번호 담아주는 변수
      self.deposit=0 # 코아스튜디오에서 확인한 앞에 번호 0
      self.use_money=0 # 실제 투자에 사용할 금액
      self.use_money_percent = 0.5 # 예수금에서 실제 사용할 비율
      self.output_deposit=0 # 출력가능 금액
<<<<<<< HEAD
      self.total_profit_loss_money = 0 # 총평가손익금액액
      self.total_profit_loss_rate = 0.0 # 총수익률(%)
=======
>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
      ################################################
      
      ### 요청 스크린 번호
      self.screen_my_info="2000" # 계좌 관련된 스크린 번호
      
      ######### 초기 셋팅 함수들 바로 실행
      self.get_ocx_instance() #Ocx 방식을 파이썬에 사용할 수 있게 변환해 주는 함수 실행
      self.event_slots() #키움과 연결하기 위한 signal / slot 모음 함수 실행
      self.signal_login_commConnect() #로그인 시도 함수 실행
      self.get_account_info() #계좌번호 가져오기
      self.detail_account_info() # 예수금 요청 시그널 포함
<<<<<<< HEAD
      self.detail_account_mystock() # 계좌평가잔고내역 가져오기
      ###############################################
      
=======
      ###############################################

>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
   def get_account_info(self):
      account_list = self.dynamicCall("GetLoginInfo(QString)","ACCNO") #계좌번호 변환
      self.account_num = account_list.split(';')[0] # a;b;c > [a,b,c]
      
      print("계좌번호 : %s" %self.account_num)
   
      
   def get_ocx_instance(self):
      self.setControl("KHOPENAPI.KHOpenAPICtrl.1") # 레지스트리에 저장된 API 모듈 불러오기
      
   def event_slots(self):
      self.OnEventConnect.connect(self.login_slot) # 로그인 관련 이벤트
      self.OnReceiveTrData.connect(self.trdata_slot) #트랜잭션 요청 관련 이벤트
<<<<<<< HEAD
      
   def signal_login_commConnect(self):
      self.dynamicCall("CommConnect()")
      self.login_event_loop.exec_()

=======
   
      
   def signal_login_commConnect(self):
      self.dynamicCall("CommConnect()")
      
      self.login_event_loop.exec_()

   
>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
   def login_slot(self, err_code):
      print(errors(err_code)[1])
      
      # 로그인 처리가 완료되었으면 이벤트 루프를 종료한다
      self.login_event_loop.exit()
      
   def detail_account_info(self, sPrevNext="0"):
      self.dynamicCall("SetInputValue(QString, QString)", "계좌번호", self.account_num)
      self.dynamicCall("SetInputValue(QString, QString)", "비밀번호", "0000")
      self.dynamicCall("SetInputValue(QString, QString)", "비밀번호입력매체구분", "00")
      self.dynamicCall("SetInputValue(QString, QString)", "조회구분", "1")
      self.dynamicCall("CommRqData(QString, QString, int, QString)", "예수금상세현황요청", "opw00001", sPrevNext, self.screen_my_info)
<<<<<<< HEAD
      self.detail_account_info_event_loop = QEventLoop()
      self.detail_account_info_event_loop.exec_()

   def detail_account_mystock(self, sPrevNext="0"):
      self.dynamicCall("SetInputValue(QString, QString)", "계좌번호", self.account_num)
      self.dynamicCall("SetInputValue(QString, QString)", "비밀번호", "0000")
      self.dynamicCall("SetInputValue(QString, QString)", "비밀번호입력매체구분", "00")
      self.dynamicCall("SetInputValue(QString, QString)", "조회구분", "1")
      self.dynamicCall("CommRqData(QString, QString, int, QString)", "계좌형가잔고내역요청", "opw00008", sPrevNext, self.screen_my_info)
      self.detail_account_info_event_loop = QEventLoop()
      self.detail_account_info_event_loop.exec_()

=======
      
>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
   def trdata_slot(self, sScrNo, sRQName, sTrCode, sRecordName, sPrevNext):
      if sRQName == "예수금상세현황요청":
         deposit =self.dynamicCall("GetCommData(QString, QString, int, QString)", sTrCode, sRQName, 0, "예수금")
         self.deposit = int(deposit)
         
         use_money = float(self.deposit) * self.use_money_percent
         self.use_money = int(use_money)
         self.use_money = self.use_money / 4 # 한종목을 매수할 때 돈을 다쓰면 안됨으로 4종목으로 나누어 주는 변수
         
         output_deposit =self.dynamicCall("GetCommData(QString, QString, int, QString)", sTrCode, sRQName, 0, "출금가능금액")
         self.output_deposit = int(output_deposit)
         
         print("에수금 : %s" % self.output_deposit)
<<<<<<< HEAD

         self.detail_account_info_event_loop.exit()
         
      elif sRQName == "계좌평가잔고내역요청":
         total_buy_money = self.dynamicCall("GetCommData(QString, QString, int, QString)", sTrCode, sRQName, 0, "총매입금액") #출력 : 000000000746100
         self.total_buy_money = int(total_buy_money)
         total_profit_loss_money = self.dynamicCall("GetCommData(QString, QString, int, QString)", sTrCode, sRQName, 0, "총평가손익금액") # 출력 : 000000000009761
         self.total_profit_loss_money = int(total_profit_loss_money)
         total_profit_loss_rate = self.dynamicCall("GetCommData(QString, QString, int, QString)", sTrCode, sRQName, 0, "총수익률(%)") # 출력 : 000000001.31
         self.total_profit_loss_rate = float(total_profit_loss_rate)
         
         print("계좌평가잔고내역요청 실글데이터 : %s - %s - %s" % (total_buy_money, total_profit_loss_money, total_profit_loss_rate))

  
                  
         self.detail_account_info_event_loop.exit()
         
         
   def stop_screen_cancel(self, sScrNo = None):
=======
         
         self.stop_screen_cancel(self.screen_my_info)
         
   def stop_screen_cancel(self, sScrNo=None):
>>>>>>> cd01dd72ddf8280aa769d68262d729fe22df1138
      self.dynamicCall("DisconnectRealData(QSrting)", sScrNo) #스크린 번호 연결 끊기
